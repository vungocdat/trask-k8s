CREATE NAMESPACES:
k create ns bob
k create ns alice
k create ns developers


CREATING CSR
openssl req -new -newkey rsa:1024 -keyout alice.pem -nodes -out - -subj "/CN=alice/O=developers" 2>/dev/null | base64 -w0 > alice.csr

openssl req -new -newkey rsa:1024 -keyout bob.pem -nodes -out - -subj "/CN=bob/O=developers" 2>/dev/null | base64 -w0 > bob.csr

cat <<EOF | kubectl create -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: alice
spec:
  request: $(cat alice.csr)
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
EOF

cat <<EOF | kubectl create -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: bob
spec:
  request: $(cat bob.csr)
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
EOF


APPROVE CSR
k certificate approve alice
k certificate approve bob


CREATE ROLEBINDING FOR NAMESPACES
k create rolebinding alice-admin -n alice --clusterrole=admin --user=alice
k create rolebinding bob-admin -n bob --clusterrole=admin --user=bob


create kubectl contexts in kcfg file for bob and alice
export KUBECONFIG=./kcfg
k config set-cluster alice --server $(KUBECONFIG=________ kubectl config view --minify | yq e '.clusters[0].cluster.server' - )
k config set-cluster alice --embed-certs --certificate-authority <(KUBECONFIG=________ kubectl config view --minify --raw | yq e '.clusters[0].cluster.certificate-authority-data' - | base64 -d)
k config set-credentials alice --embed-certs --client-key alice.pem --client-certificate <(KUBECONFIG=________ kubectl get csr alice -o jsonpath='{.status.certificate}' | base64 -d)
k config set-context alice --cluster alice --user alice --namespace=alice

k config use-context alice


show certificate
k get csr alice -o jsonpath='{.status.certificate}' | base64 -d | openssl x509 -in - -text -noout


the same do for bob
make sure that csr(s) are still there


group developers have R/W rights in namespace developers
kubectl create rolebinding developers-edit -n developers --clusterrole=edit --group=developers


alice and bob have R/O in namespace bob/alice
kubectl create rolebinding alice-view -n bob   --clusterrole=view --user=alice
kubectl create rolebinding bob-view   -n alice --clusterrole=view --user=bob


R/W rights on configMaps
kubectl create clusterrole configmap-edit --resource=configMap --verb=create,delete,deletecollection,patch,update
kubectl create rolebinding alice-edit-cm -n bob   --clusterrole=configmap-edit --user=alice
kubectl create rolebinding bob-edit-cm   -n alice --clusterrole=configmap-edit --user=bob


create a service account "audit" in default namespace with R/O in whole cluster
kubectl create sa audit -n default
kubectl create clusterrolebinding audit --clusterrole=view --serviceaccount=default:audit


create a service account "monitor" in default namespace with R/O right in "bob"
and "alice" and "developer" namespaces
kubectl create sa monitor -n default
kubectl create rolebinding monitor -n alice --clusterrole=view --serviceaccount=default:monitor
kubectl create rolebinding monitor -n bob --clusterrole=view --serviceaccount=default:monitor
kubectl create rolebinding monitor -n developers --clusterrole=view --serviceaccount=default:monitor


set context "monitor" and "audit"
export KUBECONFIG=./kcfg

aliases
alias kc="kubectl --kubeconfig `pwd`/config"
alias kxa="kubectl --kubeconfig `pwd`/kcfg --context alice"
alias kxb="kubectl --kubeconfig `pwd`/kcfg --context bob"
alias kxmon="kubectl --kubeconfig `pwd`/kcfg --context monitor"
alias kxaud="kubectl --kubeconfig `pwd`/kcfg --context audit"
alias kxadm="kubectl --kubeconfig `pwd`/kcfg --context admin"

kubectl config set-cluster monitor --server $(kc config view --minify | yq e '.clusters[0].cluster.server' - )
kubectl config set-cluster audit   --server $(kc config view --minify | yq e '.clusters[0].cluster.server' - )

kubectl config set-cluster monitor --embed-certs --certificate-authority <(kc config view --minify --raw | yq e '.clusters[0].cluster.certificate-authority-data' - | base64 -d)
kubectl config set-cluster audit   --embed-certs --certificate-authority <(kc config view --minify --raw | yq e '.clusters[0].cluster.certificate-authority-data' - | base64 -d)

kubectl get secret
kubectl describe secret ___
kubectl config set-credentials monitor --token ____
kubectl config set-credentials audit --token ____
kubectl config set-context monitor --cluster monitor --user monitor
kubectl config set-context audit --cluster audit --user audit
